#!/bin/bash

### Git Shorthands Usage:help
#
# Some shorthands for managing git repositories.
#
###

#% bundle help/info.txt

if [[ "$*" =~ --help ]]; then
	cat help/info.txt
	exit 0
fi

#% include bashout askuser

ADDFILE=
COMMIT=
ACTION=
FETCHING=yes
CURBRANCH="$(git branch|grep -P '(?<=\* ).+' -o)"
branchpat='^[a-zA-Z0-9_-]+$'

function switchchangestobranch {
	local dash="$-"; set -e

	gotobranch=$(echo $(uchoose "Which branch should ALL tracked and uncommitted changes be moved to?" "$(git branch|egrep -v '^\* ')"))
	# extra echo wrap to remove trailing whitespaces
	if [[ -z "$gotobranch" ]]; then
		if uconfirm "Nothing selected. Create a new branch?" ; then
			if ! (git branch "$(uask "Name of new branch")" ); then faile "Aborting switch"; fi
		elif ! (uconfirm "Proceed anyway?"); then
			faile "Ran away!"
		fi
	elif [[ ! "$gotobranch" =~ $branchpat ]]; then
		faile "Invalid branch [$gotobranch]"
	fi
	git stash
	git checkout "$gotobranch"
	git stash apply
	CURBRANCH="$(git branch|grep -P '(?<=\* ).+' -o)"

	if [[ ! $dash =~ e ]]; then set +e; fi
}

function switchbranch {
	local newbranch=$1; shift

	if ! (git branch|grep "$newbranch" >/dev/null); then
		uconfirm "'$newbranch' does not exits. Create it?" && {
			if [[ "$newbranch" =~ $branchpat ]]; then
				git branch "$newbranch"
			else
				faile "Invalid branch name. Branch name can only contain a-z A-Z 0-9, '_' and '-'"
			fi
		}
	fi
	git checkout "$newbranch"
	CURBRANCH="$(git branch|grep -P '(?<=\* ).+' -o)"
	if [[ "$CURBRANCH" = master ]]; then
		warne "Consider doing a merge"
	else
		warne "Consider performing a rebase"
	fi
}

debuge "Rudimentary check that we are in a safe state"

if [[ -n "$(git status | egrep 'unmerged|both modified' | sed -r 's/^(\s.+)$/[0;31m\1[0m/')" ]]; then
	warne "Conflicts identified."
	faile "gdiff cannot operate on this state."
fi

# ======

function checkmaster {
	if [[ "$CURBRANCH" = master ]]; then
		warne "\n\tYou are on master"
		if ! (git status|grep 'nothing to commit' -i >/dev/null); then
			warne "${CBRED}\tand there are changes. Don't develop on master!\n"
			if uconfirm "Move changes to a different branch?"; then
				switchchangestobranch
			else
				uconfirm "Proceed anyway?" || faile "Aborted." 
			fi
		fi
	fi
}

# need to also consider - merge and rollback

while [[ -n "$@" ]]; do
	ARG=$1
	shift

	case "$ARG" in
	--debug)
		MODE_DEBUG=yes
		;;
	-b|--branch)
		switchbranch "$1"; shift
		;;
	-r|--rebranch)
		switchchangestobranch "$1"; shift
		;;
	-m)
		ACTION=commit
		COMMIT="$*" # get the rest of the arguments as commit message
		break
		;;
	-a)
		ACTION=add
		;;
	-nf)
		FETCHING=no
		;;
	-s|--push)
		infoe "git push origin $CURBRANCH"
		git push origin "$CURBRANCH"
		exit $?
		;;
	-l|--pull)
		infoe "git pull origin $CURBRANCH"
		git pull origin "$CURBRANCH"
		exit $?
		;;
	-u|--rebase)
		infoe "git rebase $CURBRANCH"
		git rebase "$1"; shift
		exit $?
		;;
	*)
		if [[ -e "$ARG" ]]; then
			ADDFILE="$ADDFILE $ARG"
		else
			faile "No such file [$ARG]" 2
		fi
		;;
	esac
done

if [[ -z "$ACTION" ]] && [[ -z "$ADDFILE" ]]; then
	if [[ "$FETCHING" = yes ]] && [[ $(git remote | wc -l) -gt 0 ]]; then git fetch; fi
	git status
	
	checkmaster
	exit 0
fi

if [[ "$ACTION" = commit ]]; then
	checkmaster
	git add $ADDFILE
	if [[ -z "$COMMIT" ]]; then
		git commit
	else
		git commit -m "$COMMIT"
	fi
elif [[ "$ACTION" = add ]]; then
	checkmaster
	git add $ADDFILE
else
	for cfile in $ADDFILE; do
		if [[ -d "$cfile" ]]; then
			echo "Skipping directory [$cfile]"
			continue
		fi
		git diff "$cfile" | sed -r -e 's//^[/g' -e "s/^(-.*)$/${CRED}\1${CDEF}/" -e "s/^(\+.*)$/${CGRN}\1${CDEF}/" -e "s/^(@@.+)$/${CBLU}\1${CDEF}/" | less -R
	done
fi
