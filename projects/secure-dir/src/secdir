#!/bin/bash

# Script to mount / unmount singular secure directories

# Released under BSD license:
# Copyright (c) 2016 Tai Kedzierski.
# All rights reserved.
#
# Redistribution and use in source and binary forms are permitted
# provided that the above copyright notice and this paragraph are
# duplicated in all such forms and that any documentation,
# advertising materials, and other materials related to such
# distribution and use acknowledge that the software was developed
# by Tai Kedzierski. The name of Tai Kedzierski
# may not be used to endorse or promote products derived
# from this software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


### secdir Usage:help
# Manage, Mount and Unmount EncFS encrypted directory
# 
# 	secdir {list|init}
# 	secdir {mount|open} ACCOUNT [-to MOUNTPOINT] [LINK ...]
# 	secdir {unmount|close} ACCOUNT
# 
# Uses a .enc directory in the current working directory to store the encrypted files.
# 
# The secure directory is mounted in the current working directory.
# 
# If you do not specify a MOUNTPOINT, creates a directory in the current working directory and mounts there, if allowed.
# 
# 
# OPTIONS
# 
# list
# 	list secure directories by account name configured at current working directory
# 
# init
# 	set current working directory up as a location to store secure directories' encrypted data
# 
# {mount|open} [-to MOUNTPOINT] [LINKS ...]
# 	mount the secure directory. If it does not exist, offers to create it.
#
# 	You can specify `-to MOUNTPOINT` to explicitly mount the directory at that location.
#
# 	You can specify any number of softlinks to create pointing to the mounted directory.
#
# 	Will fail if you cannot write to the mountpoint
#
# 	If you have configured against mounting in the current working directory, you MUST point the `-to MOUNTPOINT`
# 	  to a different location. This allows secure directories to be distributed on a network
# 	  whilst reducing the risk of a user indavertently mounting in a publicly shared directory.
#
# 	  This is a Molly-guard, NOT a security lock.
# 
# {unmount|close}
# 	unmount a mounted secure directory.
#
# 	Any soft links created during mount will be removed.
# 
# CONFIGURATION
# 
# A configuration file is stored in .enc/config. It is an INI-style key-value store
# 
# Crypt/utility
# 	the name of the cryptographic utility to use
# 	by default, encfs and cryfs are both supported
# 	you can extend these with your own utilities in `~/.config/secdir/crypt`
#
# Mount/load_in_cwd
# 	yes --> allows mounting directories in current working directory
# 	* --> do not allow
# 
# Mount/home
# 	This must be a directory
# 	By default secure directories are mounted here instead of in the current working directory
###/doc 

set -u

#% include autohelp bashout abspath configreader

#% bundle files/config
#% include files/linkage.sh

if [[ ! -d "$HOME/.config/secdir" ]]; then
	mkdir "$HOME/.config/secdir"
fi

CONFFILE=./.enc/config
MOUNTFILE="$HOME/.config/secdir/mounts" # make it global so we can close it from anywhere

#% bundle crypts/encfs.crypt.source
#% bundle crypts/cryfs.crypt.source
if [[ ! -d "$HOME/.config/secdir/crypts" ]] || [[ "$*" =~ --installcrypts ]]; then
	mkdir -p "$HOME/.config/secdir/crypts"
	cp crypts/encfs.crypt.source "$HOME/.config/secdir/crypts/"
	cp crypts/cryfs.crypt.source "$HOME/.config/secdir/crypts/"
fi

# =============================
# load config of mounts file

config_usesection Mount
if config_isset mountfile; then
	MOUNTFILE=$(config_readval mountfile)
fi

# =============================
# Loading encryption utility

config_usesection Crypt
if ! config_isset utility; then
	faile "No encryption utility specified in .enc/config"
else
	cryptutil=$(config_readval utility)
	if [[ -f "$HOME/.config/secdir/crypts/$cryptutil.crypt.source" ]]; then
		source "$HOME/.config/secdir/crypts/$cryptutil.crypt.source"
	else
		faile "Encryption utility '$cryptutil' not defined"
	fi
fi

if ! _check_crypt ; then
	warne "$(_hoto_crypt)"
	faile "The selected encryption utility is not installed"
fi

if [[ -z "$*" ]]; then
	faile "No arguments given."
fi

# ====
# Swallow optional options
# stops at first non-option-flag
#% include files/swallow-options.source

# ========================================
# Process non-changing actions

ACTION="$1" ; shift



case "$ACTION" in
list)
	for x in .enc/*; do
		if [[ -d "$x" ]]; then
			x="$(basename $x)"
			echo "$x"
			ps aux | grep "^$(whoami).+$x" | grep -v grep # display any currently open items
		fi
	done
	exit 0
	;;
init)
	if [[ -d ./.enc ]]; then
		uconfirm "It seems this directory has already been initialized. Overwrite? This will destroy configs!!" ||
			faile "Aborting re-initalization"
	fi
	infoe "Initialize a new directory"
	debuge "App dir is $APPLICATION_WD"
	{
		mkdir -p "$PWD/.enc"
		cp files/config .enc/
	} && echo "secdir has been set up for use in $PWD"
	exit
	;;
mount|open|unmount|close)
	: # ignore for now
	;;
*)
	faile "Unknown action '$ACTION'"
	;;
esac



# ======================================
# Operate on the directory

if [[ ! -f "$MOUNTFILE" ]]; then
	touch "$MOUNTFILE" || faile "Cannot create $MOUNTFILE"
fi

# ====================================
# Get the secured directory

CUST="$1" ; shift

# ====
# Swallow optional options
# stops at first non-option-flag
#% include files/swallow-options.source

case "$ACTION" in
	mount|open)
		SECDIR="$PWD/.enc/$CUST"
		# =======================================
		# Check that the current directory is a secdir directory

		if [[ ! -d "$PWD/.enc" ]]; then
			faile "Current directory $PWD is not a valid secdir location."
		fi


		if [[ -z "$*" ]]; then
			faile "You must specify the name of a secure directory to load"
		fi

		# =====
		# Load the mount configuration options
		#% include files/load-mount-configs.sh

		# =====
		# Target dir - will be overridden by next options
		OPEDIR="$(abspath "$LOADDIR/$CUST")"

		debuge "Operating on $OPEDIR"
		# =======================================
		# Check that we are allowed to mount in current working directory

		debuge "[[ -n ${CWDALLOWED+x} ]] && [[ ! $CWDALLOWED = yes ]]"
		debuge "[[ "$(abspath "$LOADDIR")" =~ "$(abspath "$PWD")" ]]"

		if [[ -n "${CWDALLOWED+x}" ]] && [[ ! "$CWDALLOWED" = yes ]] && [[ ! "$ACTION" =~ $(echo "close|unmount") ]]; then
			if [[ "$(abspath "$LOADDIR")" =~ "$(abspath "$PWD")" ]]; then # use grep comparison to prevent any directories under too
				faile "Cannot load under current working directory - use the '-to MOUNTPOINT' option"
			fi
		fi

		# ================
		# Do mount

		if grep -E "^$CUST:" "$MOUNTFILE" -q; then
			faile "$CUST is already mounted at $(grep -E "^$CUST:" "$MOUNTFILE"|cut -d':' -f2)"
		fi

		infoe "Opening $CUST"
		debuge "Making $OPEDIR"
		mkdir -p "$OPEDIR" || faile "Cannot write to [$OPEDIR]"
		
		debuge "Loading ... $SECDIR > $OPEDIR"
		_open_crypt "$SECDIR" "$OPEDIR" || {
			rmdir "$OPEDIR" 2>/dev/null
			faile "Could not open [$CUST]"
		}
		echo "$CUST:$OPEDIR" >> "$MOUNTFILE"
		
		debuge "Creating softlinks"
		linkall "$@"
		;;
	

	unmount|close)
		mountpointdir=
		if ! grep -E "^$CUST:" "$MOUNTFILE" -q; then
			warne "$CUST is not mounted"
			exit 0
		else
			mountpointdir="$(grep -E "^$CUST:" "$MOUNTFILE"|cut -d':' -f2)"
		fi

		infoe "Closing $CUST"
		if delinkall ; then
			_close_crypt "$mountpointdir" || faile "Could not close $CUST"
			rmdir "$mountpointdir"
			sed "/^$CUST:/d" -i "$MOUNTFILE"
		else
			faile "Could not unlink some directories:$(echo; cat "$PWD/.enc/${CUST}.links")" 3
		fi
		;;



	*)
		faile "Invalid action $ACTION. Use 'mount' or 'unmount' followed by the directory name. See --help for more information"
		;;
esac
