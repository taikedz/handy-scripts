
==============================

Welcome to the Advanced Guide

==============================


Now that you've completed the basic guide, here are some extra topics and advanced usage.


--------------------------------------------
	Variables

You can set a variable for the duration of you session by assigning it a value

  myvar=value
  echo $myvar

will print "value" to your console.

Note taht there must be no space between the "myvar" and "=" for this to work.

--------------------------------------------
	Subshells


You can run new mini-shells inside commands to capture their output, by encapsulating them in "$()" block.

  myvar=$(pwd)
  echo "You are in the $myvar directory"

If you want to pass a variable to a subshell of the current shell (your terminal session), you need to export it:

  export mypath=/var/www
  thecontents=$(ls $mypath)
  echo "The contents of $mypath are $thecontents"


--------------------------------------------
	Arguments & Options

"Arguments" are the options you pass to a command.

  ls -lrt /var/www/html

There are 2 arguments to the ls command above:

  "-lrt" which is a combination of options

  "/var/www/html" which is a path

An equivalent command would be:

  ls -l -r -t /var/www/html

Where there are 4 arguments, and each option is its own argument.

In Linux, Mac, BSD, and other UNIX-like systems, the convention when building programs is to allow supplying options individually with a single "-" where an option is a single letter, or by preceeding "--" to specify an option with multiple characters

  ls --color

has one argument, representing one option.

When an argument has spaces in it, you need to enclose it with quotemarkes

  ls "my file"

Has one argument, the single string of characters (string) "my file"

If a file starts with a "-", the easiest way to distinguish it from an option is to prepend it with the "local directory" shortcut:

  ls ./-myfile

instead of "ls -myfile"

When you read the man pages for commands, you will find that this rule is loosely adhered to depending on the program you are using.

--------------------------
	Findng files

There are two predominant ways of searching for a file.

* One is the "locate" command.

   locate wp-content

will find any file with "wp-content" in its full path, including, but not limited to:

  /var/www/html/wp-content
  /var/www/html/wp-content/file1
  /var/www/htmlwp-content/folder1/file2

And so on.

* The other method is the "find" command

This searches a specified directory for files and derictories with a given property

  find . -name 'bash'

will search for a file in the current working directory (".") and all sub directories, with the name "bash" (which should return no results). Try also : find . '*bash*' for comparison

  find /var/www -name 'wp-content'

will search the /var/www directory and all directories under it for an item named "wp-content"

-----------------------------------------------
	Finding content in files

The "grep" command is used to find specific content in files, using regular expressions.

See www.regular-expressions.info for more information.

  grep 'hat' FILE

Will look for the word "hat" in the specified file

  grep 'h.t' FILE

will look for any word (or rather, sequence of letters) with a single character between a "h" and a "t"

For example: "hat", "hit", "hot", "hut", and "jfyrhjtkujrg" will all match.

  grep "readlines" /var/www/html/*

will search for the string of characters "readlines" in all the files directly under /var/www/html

  grep -r "readlines" /var/www/html

will search for the same string, in all files in /var/www/html, as well as all files inside folders under /var/www/html, and so on recursively (hences the "-r" option)

Normally the results will be displayed as the lines found and what the contents of those lines were.

A useful command is this one:

  grep -irl PATTERN PATH

Replace PATTERN and PATTH accordingly. This recursively searches all files under PATH for the specified PATTERN, but rather than printing contents, it simply lists the full path to the file in which a PATTERN was matched at least once.

  grep -E PATTERN PATH

allows you to use advanced regular expressions in the PATTERN. Note that you need to use quotemarks around the pattern, just to be sure that bash does not intercept the special characters.


------------------------------------------------------
	Input, output and redirection

Each non-interactive process (that is, on ethat just runs as a "batch" command with which you do not interact whilst it is running) has by default 3 channels, one input and two outputs.

They are known as:

* stdin ("standard in", or "standard input")
* stdout ("standard out", or "standard output")
* stderr ("standard error")

stdin is where the command reads input from.

stdout is where the command writes results to - most often to the terminal, unless it is redirected

stderr is where interactive prompts can be displayed ("Are you sure you want to do this? y/N>") so as not to be mingeld with the output if you are redirecting it.

For example

  ls /var/log/* > logfiles

Produces a list of logfiles in the file "logfiles"

This list will not be printed to the console, however you may see some errors printing there where you do not have permission to see those log files or some folders' contents.

In the above example, we "redirected stdout to a file"

To redirect stderr, you use "2>" instead

  ls /var/log/* > logfile 2>/dev/null

The above sends the error messages to the special file "/dev/null" which is essentially a black hole where we dump output we don't care about. It cannot be read. It's just a hole.


Finally, you can read a file in from stdin

  grep pattern FILE

and

  grep pattern < FILE


Are the same thing.

  grep pattern FILE1 < FILE2

will read from FILE2 (stdin) preferentially, and ignore FILE1 (this is true of grep, and can vary from program to program. Needless to say, it is a silly command).



------------------------------------------------------
	Piping commands



You can pipe the output of one command to the input another.

For example, 

  cat * | grep Linux

will display the lines of any files in the current working directory where the word "Linux" appears.



  cat FILE | wc
  cat FILE | wc -l

The above two commands will respecitvely give you the number of words in the file, and the number of lines in the file.




  du --max-depth=1 /var/www/html | sort -n | grep "wp-" | head -n 5

Will list the 5 largest Wordpress folders under /var/www/html

  du :: calculate the Disk Usage of folders
       :: --max-depth=1 :: only display the summaries for a directory directly under specififed directory

  sort :: sort lines (in this pipe, the output of "du" command)
       :: -n :: sort numerically rather than alphabetically (1,2,113 instead of 1,113,2)

  grep :: look for lines

  head :: display the first few lines of a file, 10 by default
       :: -n 5 :: instead of first 10, display the first 5 (we override the default)



---------------------------------------------------------
	Managing processes

Every time you run a program, a new process is created (roughly speaking - I spare you details).

You can see a list of running processes using

  ps ax

which dumps to the console. Try

  ps ax | less

to navigate the results without dumping to your current console.

Look for the "PID" column - this is the "process ID", the identifying number of a running process.


You can terminate misbehaving processes with

  kill $PID

where $PID is the process ID you chose. This way of terminating a process allows it to do a clean shutdown if it so desires, closing file handles and cleaning up temporary files.

If you do not want to leave it that leisure, you can kill it mercilessly:

  kill -9 $PID

This does not so much tell the process to stop, rather it tells the system to terminate it forcibly.


The kill command is a bit of a misnomer, as it can also be used to send more benign signals.

See "man kill" and Google up on "process signalling"
