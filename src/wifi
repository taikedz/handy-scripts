#!/bin/bash

### wifi Usage:help
#
# Some simple wifi controls wrapping around nmcli
#
# USAGE
# =====
#
# 	nmcli [ list | start | stop | restart | connect ACCESSPOINT [PASSWORD] | forget ACCESSPOINT ]
#
# list
# 	Lists available access points
#
# start
# 	Activates the wifi device
#
# stop
# 	Stop the wifi device
#
# restart
# 	Restart the wifi device
#
# connect ACCESSPOINT [PASSWORD]
# 	Connect to the given access point, optionally providing a password
# 	If the password is provided, it is saved for future use.
# 	If the password is not provided, but a saved password exists, that saved password is used.
#
# forget ACCESSPOINT
# 	Forget the access point and password
#
###/doc

#%include std/out.sh
#%include std/autohelp.sh

SEP=$'\033'

if [[ -z "$(which nmcli)" ]]; then
	out:fail 'Required program `nmcli` not found.'
fi

if [[ -z "$*" ]]; then
	out:info "Raw wifi status\n"
	out:info "$(nmcli connection show --active | grep wireless)\n"
	exit
fi

WIFICMD="$1" ; shift

function newconn {
	WIFI_AP="$1"; shift
	WIFI_PW="$1"; shift

	out:info "Trying to establish new connection ..."

	if [[ -n "$WIFI_PW" ]]; then
		nmcli device wifi connect "$WIFI_AP" password "$WIFI_PW" ; RES=$?
	else
		nmcli device wifi connect "$WIFI_AP" ; RES="$?"
	fi

	return "$RES"
}

function oldconn {
	WIFI_AP="$1"; shift
	out:info "Trying old connections ..."

	nmcli connection up "$WIFI_AP" ; RES=$?

	return "$RES"
}

case "$WIFICMD" in
	restart)
		debug:print Deactivating wifi
		nmcli radio wifi off

		debug:print Re-activating wifi
		nmcli radio wifi on

		out:info Done.
		;;
	stop)
		debug:print Deactivating wifi
		nmcli radio wifi off
		out:info Done.
		;;
	start)
		debug:print Re-activating wifi
		nmcli radio wifi on
		out:info Done.
		;;
	connect)
		nmcli device wifi rescan
		WIFI_AP="$1"; shift
		WIFI_PW="$1"; shift

		if [[ -z  "$WIFI_AP" ]]; then
			printhelp
			exit
		fi

		oldconn "$WIFI_AP" || newconn "$WIFI_AP" "$WIFI_PW"
		;;
	forget)
		WIFI_AP="$1"; shift
		nmcli connection delete "$WIFI_AP" && {
			out:info Done.
		}
		;;
	list)
		nmcli device wifi rescan
		nmcli device wifi list
		;;
	old)
		WIFI_AP="$1" ; shift
		if [[ -z "$WIFI_AP" ]]; then
			nmcli connection show|grep wireless
		else
			nmcli connection show "$WIFI_AP"|grep wireless
		fi
		;;
	*)
		out:fail "Invalid command $WIFICMD"
		;;
esac
