#!/bin/bash

### mdpreview Usage:help
# Preview a markdown file
#
# USAGE
# =====
#
# 	mdpreview FILEA.md FILEB.md ...
#
# Supply styles in ./styles.css , or see the CSSFILES environment variable definition below.
#
# ENVIRONMENT VARIABLES
# =====================
#
# MDEXEC - path to executable markdown processor. By default searches for `markdown_py` of `markdown`
#
#  If no markdown processor is supplied or is located, then mdpreview will fail.
#
#
#
# BREXEC - searches for a valid browser; by default tries to locate in order
#   sensible-browser, firefox, chromium-browser, elinks
#
#   If no suitable browser is found or supplied, then the preview files are listed instead of being subsequently removed.
#
# CSSFILES - by default is set to /etc/mdpreview/styles.css:$HOME/.config/mdpreview/styles.css:./styles.css
#
#  Can be overridden by setting the environment variable.
#
#
# DEST - the destination for generated HTML preview files. By default, this is /tmp
###/doc

#%include std/safe.sh
#%include std/out.sh
#%include std/autohelp.sh
#%include std/bincheck.sh

configure() {
    : "${MDEXEC=$(bincheck:get markdown_py markdown )}"
    : "${BREXEC=$(bincheck:get sensible-browser firefox chromium-browser elinks less)}"
    : "${CSSFILES="/etc/mdpreview/styles.css:$HOME/.config/mdpreview/styles.css:./styles.css"}"
    : "${DEST="./"}"
}

preflight_check() {
    [[ -d "$DEST" ]] || out:fail "Invalid destination folder [$DEST]"

    if [[ -z "$MDEXEC" ]] || [[ ! -f "$MDEXEC" ]]; then
        out:fail "No markdown processor"
    fi
}

collate_styles() {
    COLLATEDSTYLES="$(mktemp .collated_styles.XXXX)"
    echo '<style>' > "$COLLATEDSTYLES"
    echo "$CSSFILES"|sed 's/:/\n/g'|while read STYLEFILE; do
        if [[ -f "$STYLEFILE" ]]; then
            cat "$STYLEFILE"  >> "$COLLATEDSTYLES"
        fi
    done
    echo '</style>' >> "$COLLATEDSTYLES"
}

process_files() {
    local tfile allfiles

    allfiles=(:)
    for mdfile in "$@"; do
        tfile="$(mktemp -p ./ .previewXXXX.html)"
        allfiles+=("$tfile")

        cat "$COLLATEDSTYLES" > "$tfile"

        "$MDEXEC" "$mdfile" >> "$tfile"

        if [[ -n "${BREXEC:-}" ]]; then
            "$BREXEC" "$tfile" 2>/dev/null >/dev/null &
        fi
    done

    rm "$COLLATEDSTYLES"

    if [[ -z "${BREXEC:-}" ]]; then
        out:info "${allfiles[*]}"
    else
        sleep 2 # leave time for browsers to finish loading
        rm "${allfiles[@]:1}"
    fi
}

main() {
    autohelp:check-or-null "$@"

    configure
    preflight_check
    collate_styles

    process_files "$@"
}

main "$@"
