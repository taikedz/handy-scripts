#! /bin/bash

set -euo pipefail
# IFS='\n\t' # do not accept space as value separator

# =========================================
# Very Easy Firewall Initial Setup
# =========================================

CDEF="[0m"
CRED="[1;31m"
CGRN="[0;32m"
CYEL="[0;33m"
CBLU="[0;34m"

#CONFIG="/usr/local/etc/vefw"
CONFIG="/etc/vefw" # New location.

function showhelp {
cat <<EOF 1>&2 && exit

${CBLU}==== Very Easy Firewall ====$CDEF

Manage your firewall with very little fuss.

This script helps in setting up initial firewall defaults
for configuring servers

Edit the rule files (see below) to open and close the
needed ports

The command can be run in one of 3 ways

	$0
	$0 --apply
	$0 --noreset

The default mode simply lists what ports will be left
open, what lockdown policy will be applied, and what
IPs will be banned.

Use the "--apply" mode to actually apply these.

The normal mode flushes all rules and chains, then
applies TCP rules for ports defined in the port files

The --noreset option prevents flushing rules and chains,
The rules are re-applied, no existing rules are affected.

${CGRN}==== Rule Files ====${CDEF}

There are four files which govern the use
of the Very Easy Firewall tool.

	$CONFIG/inputs
	$CONFIG/outputs
	$CONFIG/policy
	$CONFIG/banned

${CYEL}--- Port files ---${CDEF}

List in "inputs" and "outputs" the port numbers that
need to be allowed. You can specify for example "80"
to allow HTTP traffic, or port "53ut" for DNS traffic
on both UDP and TCP, or "7654u" to allow custom UDP-only
traffic on the designated port.

You can define as many ports as you want per line.
Comments start with a "#" and end at the end of the line.

${CYEL}--- Lockdown Policy ---${CDEF}

Specify one uncommented line in "policy": this is the default policy
to set once the firewall rules have been applied. Typically this
will be one of

* REJECT (explicitly reject connections)
* DROP (silently drop connections)
* ACCEPT (accept any incoming connection - ONLY FOR TESTING)

${CYEL}--- IP Bans ---${CDEF}

In the "banned" file you can list IP addresses and IP ranges
to add INPUT ban rules for - these will ban connections, and
cut existing connections when the rule is applied.

${CGRN}=== Creating rules ===${CDEF}

If the $CONFIG directory does not exist, vefirewall will not
run. To create it, run '$0 --initialize'.

If on initialization $CONFIG already exists, but any of the
subfiles do not exist, NONE will be re-created or overwritten.
You must remove $CONFIG directory altogether to use
initialization.
EOF
}

function dumports {
	# use 'echo' to flatten to a single line
	if [[ -f "$CONFIG/$1" ]]; then
		echo $(cat "$CONFIG/$1" | sed -r 's/#.+$//' )
	else
		echo "" # can't simply be silent....??
	fi
}

# ======= Main ----------------Â¬

# TODO - add a forceful override to this.
[[ -f /etc/redhat-release ]] && [[ $( cat /etc/redhat-release | sed -r -e 's/^.*?release ([0-9]+).*$/\1/') = '7' ]] && { echo "RedHat/CentOS version 7 does not use iptables directly. Please use firewalld."; exit 1; }


[[ $UID != 0 ]] && { echo "${CRED}You are not root$CDEF" 1>&2 ; exit 1 ; }

f_doreset=y
f_dryrun=y
f_mkconfig=n
for arg in $@; do
case $arg in
	--noreset)
		f_doreset=n
		;;
	--help)
		showhelp
		;;
	--apply)
		f_dryrun=n
		;;
	--initialize)
		f_mkconfig=y
		;;
esac
done

function banrange {
	setupban
	iptables -A BANNED -m iprange --src-range "$1" -j DROP
}

function banip {
	setupban
	iptables -A BANNED -s "$1" -j DROP
}

function setupban {
	[[ $(iptables -L | egrep '^Chain BANNED' -c) -lt 1 ]] && {
		iptables -N BANNED
		iptables -t filter -I INPUT -j BANNED
	}
}

[[ "$f_mkconfig" = y ]] && (
	[[ $(read -p "Are you sure you want to ${CRED}INITIALIZE${CDEF} the configs to DEFAULT VALUES? y/N> " RESP; echo "$RESP") = "y" ]]
	) && {
	mkdir -p "$CONFIG"
	cat <<EOF > "$CONFIG/policy"
# Lockdown policy - ACCEPT, REJECT, DROP
DROP
EOF
	cat <<EOF > "$CONFIG/inputs"
#22 # SSH port - enable for SSH

#80 443 # Standard web ports

EOF
	cat <<EOF > "$CONFIG/outputs"
22 # SSH
53ut # DNS lookups - udp and tcp
80 443 8080 # Some typical web host ports
#3306 # MySQL/MariaDB requests - you may need to activate this even for local MySQL access
143 993 # IMAP
110 995 # POP3
25 465 587 # SMTP
#21 # FTP
EOF

	cat <<EOF > "$CONFIG/banned"
# Add here IP addresses, or IP ranges, separated by spaces
# Example:
# 192.168.56.5
# 10.178.3.4 10.178.3.5
# 183.60.0.0-183.65.255.255
EOF
	chmod -R 700 "$CONFIG"

	echo "${CRED}MAKE SURE$CBLU you configure initial $CONFIG/inputs file or no new connections will come in!$CDEF"
}

INPUTS="$( dumports inputs )"
OUTPUTS="$( dumports outputs )"
POLICY="$( dumports policy )"
BANIP="$( dumports banned )"
[[ -z "$POLICY" ]] && { echo "No lockdown policy. See --help option for more." ; exit 99 ; }

[[ "$f_dryrun" = y ]] && cat <<EOF && exit
Use the --apply option to apply these rules:

INPUT: $INPUTS
OUTPUT: $OUTPUTS
POLICY: $POLICY

Banned IPs:
$BANIP
EOF
# -------------------/

# Reset rules
[[ "$f_doreset" = y ]] && {
	set +e
	iptables -P INPUT ACCEPT
	iptables -P OUTPUT ACCEPT
	iptables -P FORWARD ACCEPT
	set +e # the following can silently fail
	iptables -F # flush rules
	# forcefully delete chains
	iptables -L | grep Chain | grep -vE 'Chain (INPUT|OUTPUT|FORWARD)' | cut -d ' ' -f 2 | while read x; do iptables -X $x ; done
	set -e
}


# Apply simple rules ---------------Â¬
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p icmp -j ACCEPT
iptables -A OUTPUT -p icmp -j ACCEPT
iptables -A INPUT -i lo -j ACCEPT

PRULE="([0-9]+)([ut]{1,2})"

function chainup {
CHAIN=$1
shift
for firule in $@; do
	if [[ $firule =~ $PRULE ]]; then
		FPORT=${BASH_REMATCH[1]}
		FPROTO=${BASH_REMATCH[2]}
		[[ $FPROTO =~ u ]] && iptables -A $CHAIN -m state --state NEW -p udp --dport $FPORT -j ACCEPT
		[[ $FPROTO =~ t ]] && iptables -A $CHAIN -m state --state NEW -p tcp --dport $FPORT -j ACCEPT
	else # just a number
		iptables -A $CHAIN -m state --state NEW -p tcp --dport $firule -j ACCEPT
	fi
done
}

IPpat='[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
function banhammer {
	# FIXME need to properly verify that the IPs are valid, else script will bail
	set +e # in the mean time, turn off auto-bail
	for ipspec in $@; do
		if [[ "$ipspec" =~ $IPpat-$IPpat ]]; then
			banrange "$ipspec"
		elif [[ "$ipspec" =~ $IPpat ]]; then
			banip "$ipspec"
		else
			echo "${CRED}Not a valid IP $ipspec${CDEF}"
		fi

	done
	set -e
}

banhammer $BANIP
chainup INPUT $INPUTS
chainup OUTPUT $OUTPUTS

# Lock down ---------------------Â¬


for fchain in INPUT OUTPUT FORWARD; do
	iptables -P $fchain $POLICY
done

cat <<EOF
$CRED
Firewall locked down.

${CGRN}Input: $INPUTS
Output: $OUTPUTS

Lockdown policy: $POLICY

${CYEL}Banned:
$BANIP
$CDEF
EOF

if [[ -f /usr/bin/dpkg ]]; then # checking for dpkg, if present presume Debian/Ubuntu and presence of iptables-persistent in repo
	if [[ "$(dpkg --get-selections | grep iptables-persistent | wc -l)" -lt 1 ]]; then
		read -p "Install iptables-persistent? " RY
		if [[ $RY =~ 'y' ]]; then # we have dpkg, presuming we have apt
			apt-get install -yy iptables-persistent
		fi
	else
		dpkg-reconfigure iptables-persistent # Debian/Ubuntu
	fi
elif [[ -f /etc/redhat-release ]]; then
	/sbin/service iptables save # RHEL/CentOS 6 and before
else
	cat <<EOF
Unknown save mechanism. Please consult a search engine to find out how to save iptables firewalls in your distribution.
EOF
fi
