#! /bin/bash

# Script to automatically start or kill a tunnel
# Saves information to a ~/.autotunnel/PORT.pid containing the PID of the SSH instance

# ssh -fN -R 5500:localhost:22 anchor & >> ~/.autotunnel/PORT.log

# Declare global variables

t_confdir=$HOME/.autotunnel
mkdir -p $t_confdir
if [[ $? != 0 ]]; then
	echo "Could not make preferences directory!"
	return 1
fi

# DECLARE ARGS

t_action=
t_lport=
t_rport=
t_rserv=

# Get arguments

function getarg {
	# $1 - arg
	# $2 - label
	# $3+ - value(s)
	local a_arg=$1
	shift

	local a_label=$1
	shift

	local a_match=$1
	shift

	echo "$a_arg" | grep -E "^$a_label=$a_match$" | sed -e "s/$a_label=//"
}

function matcharg {
	# $1 - argument
	# $2+ - values
	local a_arg=$1
	shift

	local a_match=$( echo "$@" | tr ',' '\n' )

	echo -e "$a_match" | grep "^$a_arg$"
}

for var in "$@"; do
	l_action=$( matcharg $var "START,STOP,STATUS"  )
	if [[ x$l_action != x ]]; then
		t_action=$l_action
	fi

	l_lport=$( getarg "$var" "--lport" "[1-9][0-9]+"  )
	if [[ x$l_lport != x ]]; then
		t_lport=$l_lport
	fi

        l_rport=$( getarg "$var" "--rport" "[1-9][0-9]+" )
        if [[ x$l_rport != x ]]; then
                t_rport=$l_rport
        fi

        l_rserv=$( getarg "$var" "--server" "[^.][a-z0-9\\.-]+[^.]" )
        if [[ x$l_rserv != x ]]; then
                t_rserv=$l_rserv
        fi

done

cat <<EOF
Action: $t_action
Local port: $t_lport
Remote port: $t_rport
Server: $t_rserv
EOF
