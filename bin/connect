#!/bin/bash

SERVERFILE=./servers/default.list
CONFIG=$HOME/.connectrc
NEWHOST=
COPYKEY=no
FORCE=no
SHOWHELP=no

[[ -f "$CONFIG" ]] && source "$CONFIG"

while [[ -n "$@" ]]; do
	ARG=$1
	shift

	if [[ "$ARG" = "-a" ]] && [[ -n "$@" ]]; then
		NEWHOST=$1
		shift
	elif [[ "$ARG" = "-f" ]]; then
		FORCE=yes
	elif [[ "$ARG" = "--help" ]]; then
		SHOWHELP=yes
	elif [[ "$ARG" = "-k" ]]; then
		COPYKEY=yes
	else
		SERVERFILE=$ARG
	fi
done


set -euo pipefail
TARGET=

CDEF='[0m'
CRED='[1;31m'
CGRN='[1;32m'
CYEL='[1;33m'
CBLU='[1;34m'

function printhelp {
	cat <<EOF

USAGE

	$(basename $0) [OPTIONS] [SERVERFILE]

Connect to a server listed in SERVERFILE

When presented with the list, you will be prompted to make a selection.

Type either the number of the entry, or a string that matches one of the entries.

If your string matches several entries, you will be notified and prompted to select again.

If you enter a blank entry, or do not make a valid entry, you will simply exit the script.

OPTIONS

	-a DOMAIN
		add a domain name to the servers file

	-k	copy ssh public key to destination server
		once you select a server to connect to, your public key will be copied to it
	
	-f	force add server
		forces adding a name that does not resolve

EXAMPLE: server file

	#--------- example file contents
${CYEL}	Any line starting with "%" is a server specification
	You can append comments to the end of server names

	% server1.example.com
	% server2.example.com # this comment will be displayed in selections

	This allows you to annotate appropriately.
	You can also comment out servers

	#% server3.example.com # deactivated server
${CDEF}	# -------- /example

Note that the SERVFILE must already exist before execution. You can simply

	${CBLU}touch SERVERFILE$CDEF

to create it.

EOF
}

[[ "$SHOWHELP" = yes ]] && {
	printhelp
	exit 0
}

SEMIC=';'
( [[ "$SERVERFILE" =~ $SEMIC ]] || [[ "$NEWHOST" =~ $SEMIC ]] ) && {
	echo "${CRED}semi-colon prohibited.$CDEF"
	exit 2
}

if [[ ! -f "$SERVERFILE" ]]; then
cat <<EOMSG

${CRED}No server file "$SERVERFILE"${CDEF}

Please create "$SERVERFILE" and list the servers required

Run $(basename $0) --help for details.

EOMSG
	exit 1
fi

if [[ -n "$NEWHOST" ]]; then
	set +e
	THEHOST=$(echo "$NEWHOST"|sed -r 's/^(([^@]+?@)[a-zA-Z0-9.-]+).*$/\2/')
	RES=$(nslookup "$THEHOST" |grep NXDOMAIN -c)
	if ([[ $RES -gt 0 ]] || [[ "$?" -gt 0 ]]) && [[ ! "$FORCE" = "yes" ]]; then # on one machine I tested with, even NXDOMAIN returned status 0...!
		echo "${CRED}Unknown host '$NEWHOST'$CDEF"
		exit 1
	fi

	if [[ $(grep "$THEHOST" "$SERVERFILE" -c) -gt 0 ]]; then
		echo -e "${CYEL}It looks like $THEHOST may already be defined in the file:$CDEF\n\n$(grep "$THEHOST" "$SERVERFILE" -n)"
		exit 3
	fi
	set -e
	echo -e "+++++++++\nHost added $(date)\n" >> "$SERVERFILE"
	echo "% $NEWHOST" >> "$SERVERFILE" # do NOT use "-e" switch!
	echo >> "$SERVERFILE"
fi

echo "$CGRN Using $SERVERFILE$CDEF"

ALLSERVERS=$(grep -E '^%' "$SERVERFILE" | grep -E '^' -n | sed 's/:%//')

while [[ x = x ]]; do
	echo -e "Connect to: \n\n$ALLSERVERS"

	CHOICE=
	read -p "> " CHOICE

	NUMPAT='^[0-9]+$'
	[[ $CHOICE =~ $NUMPAT ]] && CHOICE="^$CHOICE\s"

	if [[ -n "$CHOICE" ]]; then
		TARGET=$(echo "$ALLSERVERS" | grep -P "$CHOICE" | sed -r -e 's/^[0-9]+ //'|sed -r 's/^([@_a-zA-Z0-9.-]+).*$/\1/')

		if [[ $(echo "$TARGET"|wc -l ) -gt 1 ]]; then
			echo -e "${CYEL}Multiple results\n\n$CBLU$TARGET$CDEF\n"
			continue
		else
			break
		fi
	else
		exit 0
	fi
done

[[ $COPYKEY = yes ]] && {
	ssh-copy-id "$TARGET"
}

[[ -n "$TARGET" ]] && {
	echo "${CGRN}Connecting to '$TARGET'$CDEF"
	ssh $TARGET
}
