#! /bin/bash

# Commented iptables firewalll restructuring
# For learning and iptables and bash
# Secures a standard web host in server mode;
# or provides sane defaults for workstation mode.

# See http://wiki.centos.org/HowTos/Network/IPTables 
# for more info on iptables command

if [[ $UID != 0 ]]; then
	echo "You are not root."
	exit 1
fi

## Adding args options

MYMODE="workstation"

if [[ "x$1" = 'x-m' && "x$2" != 'x' ]]; then
	shift # pop the '-m'
	MYMODE=$1 # get the arg
	shift # pop that too
	case "$MYMODE" in
		server)
			echo "Configuring for a server"
			;;
		workstation)
			echo "Configuring for a workstation"
			;;
		open)
			echo "Opening the firewall up completely. Be careful!"
			iptables -P INPUT ACCEPT
			iptables -P OUTPUT ACCEPT
			iptables -P FORWARD ACCEPT
			iptables -F
			# add an 'at' job to revert the changes after now + 10 minutes?
			# check for $1 numeric?
			exit 0 # We don't even bother saving this configuration... just leave.
			;;
		*)
			echo "Invalid mode: $MYMODE"
			exit 1
			;;
	esac
fi


# [1] if we have connected from a remote machine, make sure
#    we maintain connection!
# add a live rule
iptables -P INPUT ACCEPT

# [2] flush current rules table, which closes all external
#   connections if policy is DROP - hence step 1.
iptables -F

# [3] add our first rule on incoming connections:
# "-m state" load module state
# "--state ESTABLISHED,RELATED" any connections that originated
#     from us
# "-j ACCEPT" jump to setting the target action, which is ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# [4] Accept any input for protocol ("-p") ICMP
iptables -A INPUT -p icmp -j ACCEPT

# [5] Accept anything from localhost -- the distinction is not visible
# when dumping from iptables -L
iptables -A INPUT -i lo -j ACCEPT

# [6] Accept incoming new ssh (tcp port 22) connections
# existing connections in general are served by rule [3]
iptables -A INPUT -m state --state NEW -p tcp --dport 22 -j ACCEPT
# Default port is 5500 for VNC?
#iptables -A INPUT -m state --state NEW -p tcp --dport 5500 -j ACCEPT

# [6.1] XTRA - allow other connections - customize as necessary
if [[ $MYMODE = 'server' ]]; then
	# Only open these publicly for servers
	iptables -A INPUT -m state --state NEW -p tcp --dport 80   -j ACCEPT
	iptables -A INPUT -m state --state NEW -p tcp --dport 443   -j ACCEPT
	iptables -A INPUT -m state --state NEW -p tcp --dport 8080 -j ACCEPT
	#iptables -A INPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT
	# port 80 is for Apache; 3306 is for MySQL, for example.
fi

# [7] Reject everything else
iptables -P INPUT DROP

# [8] Reject all forwards (we are not a router)
if [[ $MYMODE = 'server' ]]; then
	iptables -P FORWARD ACCEPT
else
	iptables -P FORWARD DROP
fi

# [9] Accept any outgoing traffic
if [[ $MYMODE = 'workstation' ]]; then
	iptables -P OUTPUT ACCEPT
fi

if [[ $MYMODE = 'server' ]]; then
	# Allow outgoing requests from already established transactions
	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	# Limit outgoing connections
	iptables -A OUTPUT -m state --state NEW -p tcp --dport 80 -j ACCEPT
	iptables -A OUTPUT -m state --state NEW -p tcp --dport 443 -j ACCEPT
	iptables -A OUTPUT -m state --state NEW -p tcp --dport 8080 -j ACCEPT
	iptables -A OUTPUT -m state --state NEW -p tcp --dport 25 -j ACCEPT
	iptables -A OUTPUT -m state --state NEW -p tcp  --dport 53 -j ACCEPT # DNS queries!
	iptables -A OUTPUT -m state --state NEW -p udp  --dport 53 -j ACCEPT # DNS
	iptables -P OUTPUT DROP
fi

# [10] Save the settings we've just defined so that
# they apply when we reboot

if [[ "x$(which dpkg)" != "x" ]]; then # checking for dpkg, if present presume Debian/Ubuntu and presence of iptables-persistent in repo
	if [[ "x$(dpkg --get-selections | grep iptables-persistent)" = 'x' ]]; then
		read -p "Install iptables-persistent? " RY
		if [[ $RY = 'y' ]]; then # we have dpkg, presuming we have apt
			apt-get install iptables-persistent
		fi
	else
		dpkg-reconfigure iptables-persistent # Debian/Ubuntu
	fi
else # presume CentOS 5/6... very lazy, i know. Not tested on CentOS 7
	/sbin/service iptables save # RHEL/CentOS
fi
