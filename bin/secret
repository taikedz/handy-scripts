#!/bin/bash

## -------- Set error handling

[[ -z "$EDITOR" ]] && EDITOR=nano

set -euo pipefail

## -------- optional - add signal trap
## 'trap' COMMAND signal

#trap 'exit' SIGINT

## -------- Define colours

CDEF='[0m'
CRED='[0;31m' # Regular
CGRN='[0;32m'
CYEL='[0;33m'
CBLU='[0;34m'
CRDB='[1;31m' # Bold (if supported)
CGNB='[1;32m'
CYLB='[1;33m'
CBUB='[1;34m'
CRDU='[4;31m' # Underline (if supported)
CGNU='[4;32m'
CYLU='[4;33m'
CBUU='[4;34m'

## -------- Define help routine

function printhelp { # MODIFY AS APPROPRIATE, including copyright and license
cat <<EOHELP | less -R
***************************
*                         *
*	${CBUB}Secret${CDEF}            *
*                         *
***************************

${CBUB}copyright:   $CDEF (C) 2015 Tai Kedzierski
${CBUB}license:     $CYEL GNU General Public License version 3
${CBUB}license url: $CBUU https://www.gnu.org/licenses/gpl-3.0.html${CDEF}


Secret is a simple wrapper around the gpg tools to make encrypting and decrypting
files easy. It aims to provide handy shorthands to common GPG tasks

Usage:

	${CBLU}$0 ${CYEL}setup${CDEF}
	${CBLU}$0 ${CYEL}default EMAIL${CDEF}
	${CBLU}$0 ${CYEL}find SERVER SEARCHTERMS${CDEF}
	${CBLU}$0 ${CYEL}add PUBLICKEY${CDEF}
	${CBLU}$0 ${CYEL}encrypt FILE [RECIPIENTS ...]${CDEF}
	${CBLU}$0 ${CYEL}decrypt FILE ...${CDEF}
	${CBLU}$0 ${CYEL}export [{cert|key} IDENTITY]${CDEF}

${CYLB}setup${CDEF}

Create an identity on this computer

${CYLB}default EMAIL${CDEF}

Set EMAIL to be the default identity.

Current default is "$GPGME"

${CYLB}find SERVER SEARCHTERMS${CDEF}

Import a public key from a named server

${CYLB}add PUBLICKEY${CDEF}

Import a public key

${CYLB}sign FILE${CDEF}

Sign a file without encrypting it

${CYLB}verify ASCFILE${CDEF}

Verify the signature on an ASC file

${CYLB}encrypt FILE [RECIPIENTS ...]${CDEF}

Encrypts a file. If no recipient is specified, you are designated the recipient.

${CYLB}decrypt FILE ...${CDEF}

Decrypts the file with your private keys.

${CYLB}export [{cert|key} IDENTITY]${CDEF}

${CRED}not yet implemented${CDEF}

Exports the certificate or private key of the specified identity.

If no IDENTITY is specified, uses the default identity.

If no mode is specified, lists all identity names.

${CYLB}--help${CDEF}

Prints this help
EOHELP
}

## -------- Define script-wide variables
GPGME=
CONFIG=$HOME/.config/secret.cfg

[[ -f "$CONFIG" ]] && { . "$CONFIG" ; }

[[ -z "$GPGME" ]] && {
	echo "${CYLB}WARNING - no default identity${CDEF}"
}

function lsasc {
	echo -n "$CGNB" ; set +e
	ls "$1".asc
	echo -n "$CDEF" ; set -e
}

function colorize { # does not work yet // intended call: colorize "STRING"
	cat "$@" | sed -r -e "s/^(error|no signature)$/${CRED}\1${CDEF}/" -e "s/^(Good signature)$/${CGRN}\1${CDEF}/"
}

## -------- parse arguments

[[ "$@" =~ --help ]] && { printhelp ; exit ; }

emptypat='^\s*$'
[[ "$@" =~ $emptypat ]] && { echo "Nothing to do. Use the --help option for more information." ; exit 2 ; }

case "$1" in
	setup) # TODO allow specifying the default identity to use and store in config, load to $GPGME
		# TODO - check for entropy and offer to sudo entropy
		gpg --gen-key
		;;
	find)
		shift
		SERVER=$1
		shift
		gpg --keyserver "$SERVER" --searchkeys "$@"
		;;
	default)
		shift
		echo "GPGME=$1" > $CONFIG # FIXME not robust, overwrites everything
		echo "${CGNB}Default set to $1${CDEF}"
		;;
	add)
		shift
		for KEY in "$@"; do gpg --import "$KEY"; done
		;;
	sign)
		shift
		gpg --clearsign "$1"
		lsasc "$1"
		;;
	verify)
		shift
		gpg --verify "$1"
		;;
	encrypt)
		shift
		FILE=$1
		shift
		RECS=
		if [[ "$@" =~ $emptypat ]]; then RECS="$GPGME" 
		else for TERM in "$@"; do RECS="$RECS $TERM" ; done ; fi
		RECS=$(echo "$RECS"|sed -r 's/(\S+)/-r \1/g')
		gpg --encrypt --sign --armor $RECS "$FILE"
		lsasc "$FILE"
		;;
	decrypt)
		shift
		gpg --multifile "$FILE"
		;;
	export)
		shift
		[[ "$@" =~ $emptypat ]] && { gpg --list-keys ; exit ; }
		gpg --armor --export $@
		;;
	entropy)
		[[ $(cat /proc/sys/kernel/random/entropy_avail) -lt 300 ]] && {
			[[ "$UID" != 0 ]] && { echo "You are not root" ; }
			apt-get install rng-tools
			echo "HRNGDEVICE=/dev/urandom" >> /etc/default/rng-tools
			service rng-tools start
		}
		;;
	*)
		echo "${CRDB}I do not understand ${CBUB}$1${CDEF}"
		exit 99
esac

